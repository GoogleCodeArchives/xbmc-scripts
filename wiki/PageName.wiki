#summary Développement d'un script de magnétoscope numérique multiserveur

= Introduction =

F2XTV_V2 se transforme finalement en un nouveau projet mené avec Nioc pour faire un système TV multiserveur et multiplateforme

Le nom de code S2XTV...

Il est en fait constitué d'un moteur qui gère certaines requêtes avec différents serveurs videos (demandes de playlists, redirections de flux RTSP en flux UDP ..) et/ou les enregistre sur disque dur. Il fait donc office de magnétoscope numérique

= définitions préalables =
- moteur : le script qui gère les requêtes du client et qui pilote serveurs et enregistrements programmés

- serveurTV : un serveur de télévision (freebox TV ; belgacom TV, VLC RTSP ...)

- client GUI : le 'frontend' ; l'interface qui va servir de relais entre les manipulations de l'utilisateur et le moteur de programmation.

= notes de développement =

- le format des demandes aux serveurs peuvent se faire de plusieurs manières:
 http://moteurip:port/nom_serveurTV/nom_action?nom_param1=info1&nom_param2=info2...

 ou

 http://moteurip:port/nom_serveurTV?action=nom_action&nom_param1=info1&nom_param2=info2...

 ou

 http://moteurip:port/?server=nom_serveurTV&action=nom_action&nom_param1=info1&nom_param2=info2...

Dans chacun des cas, nom_serveurTV (ou server=nom_serveurTV) et/ou nom_action (ou action=nom_action) peuvent être omis, des valeurs par défaut seront alors utilisées, ces valeurs sont:

 'all' pour nom_serveurTV, qui correspond à tous les serveurs, et donc l'action sera appliquée à chacun des serveurs

 'showInfos' pour action, qui affiche les informations sur le serveur sélectionné ou tous les serveurs.

Ainsi l'adresse suivante, est valable:
 http://moteurip:port/nom_action?nom_param1=info1&nom_param2=info2...

- de par son côté multiplateforme, l'interface par défaut est une interface web, les informations retournées sont donc soit aux formats HTML, soit un fichier, soit un flux
 * Pour obtenir des réponses spéciales interface graphique, il faut ajouter le paramètre 'interface' à la valeur 'GUI'.

- les playlists sont demandées au "moteur" pour un serveurTV donné.
 * la demande par défaut renvoie un fichier Playlist HTTP (différent du fichier playlist RTSP dans le cas d'un serveur TV RTSP). Le paramètre 'rtsp' à 'accept' permet de récupérer le fichier playlist RTSP. Il est obligatoire de préciser le serveur désiré! La valeur 'all' pour le paramètre 'server' renvoie une erreur 404.
 * la demande GUI renvoie une chaîne de caractère á traiter avec la fonctions 'loads' du module 'pickle'. Si le paramètre 'server' est spécifié, le résultat est une liste de tuples contenant le numéro de chaîne, le nom de la chaîne, l'adresse de la chaîne, l'ID de la chaîne. Sinon, la réponse sera un dictionnaire avec comme clé le nom du serveur et comme valeur le tableau de tuples. La taille du dictionnaire sera fonction du nombre de servers.
 * Pour éviter de surcharger le serveurTV par des requêtes de Playlists, les playlists sont générée au démarrage du moteur. Elles peuvent´être actualisées en ajoutant le paramètre 'access' à la valeur 'distant'. La réponse sera la playlist actualisée.

- une playliste 'customisée' est locale à la GUI (le moteur n'en sais rien et s'en moque)
 * Une version 'customisée' de la playlist peut être donnée au serveur en précisant dans sa configuration que la playlist est 'locale'. Attention, la gestion des chaînes est donc laissée à l'utilisateur, la disparition de certaines chaînes ou l'apparition de nouvelles sera donc invisible pour le server.

- le serveur doit retrouver le nom des chaines associées à un serveur
 ex: http://moteurip:port/freeboxtv/getname?chanid=201 --> "France 2"
  :NON : ceci est fait dans la playliste envoyée au client

- La lecture des chaînes RTSP sera transparente, puisque définie dans la playlist envoyée par le serveur. Seule les chaînes RTSP pourront être demandées en lecture au serveur, les autres chaines seront á demandées directement au serveurTV.
 Cas des châines RTSP:
 http://moteurip:port/serveurTV/id_chaine

 ou

 http://moteurip:port/serveurTV/play?idchan=id_chaine

- Cas d'un enregistrement immédiat : 
 http://moteurip:port/serveurTV/record?idchan=201

- Implémenter la notion d'arrêt d'enregistrement. Mettre en place un système pour que le client demande l'arrêt d'un enregistrement (demande d'enregistrement sur la même chaine avec datedebut + duree = antérieur à maintenant ?)

- Mettre en place un système de codes de retours du moteur vers le client GUI:
  * ~~programmation incorrecte~~ : non ! géré par le client GUI
  * chaine introuvable
  * serveur indisponible
  * fonction non supportée (pour éventuellement interdire une fonction qui fonctionnerait sur un serveurTV mais pas un autre
  * gestion des espaces disque (disk full ; chemin erroné ...)
  * configuration : chemain des enregistrements = le client GUI doit envoyer le chemin au serveur

- voir pour intégrer un système simple de programme TV (tcsh.telecable.com)

= Commandes http clientGUI - moteur =

getPlaylist

demande la playlist du serveur nom_serveur. Un fichier m3u est retournée.

Paramètre(s) obligatoire(s):
 - server=nom_serveur : Le fichier m3u n'est générable que pour un serveur spécifique. Cette obligation est suspendue lors l'utilisation du paramètre interface=GUI.

Paramètre(s) optionnel(s):
 - interface=GUI : renvoie une chaîne de caractère interprétable par pickle.loads(chaine)
  * renvoie un tableau de tuples lorsque server=nom_serveur
   [(num_chaine, nom_chaine, adresse_chaine, id_chaine)]
  * renvoie un dictionnaire lorsque server=all
   {nom_server : [(num_chaine, nom_chaine, adresse_chaine, id_chaine)]}
 - rtsp=accept : renvoie la playlist RTSP du serveurTV nom_serveur. Si le serveurTV n'est pas RTSP, la playlist HTTP est renvoyée.

showInfos

renvoies les informations sur le serveur S2XTV, ou sur le serveur TV défini en paramètre. L'information retournée est HTTP, il n'y a pas de versions GUI disponible actuellement. 

Les informations sont actuellement:
 - les paramètres de configuration de chacun des serveurTV (ou du serveurTV), 
 - les enregistrements programmées et en cours, et 
 - les actions disponibles 
  * actuellement, toutes les actions disponibles sont affichées, il faudrait ajouter la possibilité de limiter les actions en fonction du serveurTV

Paramètre(s) obligatoire(s):
 - aucun

Paramètre(s) optionnel(s):
 - server=nom_serveur: limite les informations au serveur spécifié

play

utilisable uniquement sur des flux RTSP (transparent en utilisant les playlists générées par le serveur). Une erreur 404 est renvoyée pour des serveursTV non RTSP. L'action génére un échange RTSP avec le serveur TV, et renvoie un flux UDP.

Paramètre(s) obligatoire(s):
 - idchan=id_chaine: spécifie le flux à diffuser

Paramètre(s) optionnel(s):
 - aucun

idées:

getTVserver
demande la liste des serveurs configurés et fonctionnels
/
liste des serveursTV, leurs description, et de leurs paramètres (a voir)


getRecords
demande la liste des enregistrements en cours
tvserver : le nom du serveur TV ou 'all' pour tous les serveurs
liste : idprog,datedebut(timestamp),duree(min)
 /!\ info redondante avec getProgs /!\ --> utilisation de getProgs avec le statut des programmations"

getProgs
demande les programmations effectuées
tvserver :  le nom du serveur TV ou 'all' pour tous les serveurs
idprog,datedebut(timestamp),duree(min),statut(états à définir)
le statut pourrai prendre les états suivants :  - programmé : la programmation faite est ultérieure et non commencée  - en cours : l'enregistrement est en cours   - échoué : un problème a empêché l'enregistrement  - dépassé : script non démarré lors de la date de début  - stoppé : programmation stoppée Ou alors, on peut éventuellement lister les programmations, et c'est le client qui gèrera les dates pour définir le moment (programmé, en cours) On peut également envisagé de conserver les programmations dans le fichier des programmations pendant X heures après la fin de l'enregistrement. Mais peut être grosse charge moteur ?"

stoprecord
arrête un enregistrement donné
tvserver :  le nom du serveur TV ou 'all' pour tous les serveurs idrec : identifiant de l'enregistrement
0 --> l'enregistrement en cours mentionné n'existe pas '1' --> l'enregistrement en cours a été stoppé"


record
lance l'enregistrement d'une chaine




prog
programme un enregistrement


== divers ==
 o audience Free
http://audience.free.fr/audience15.xml




