Help on module allocine:

NAME
    allocine - To do

FILE
    f:\data\allocine\allocine\allocine.py

CLASSES
    Movie
    Movies
    Personality
    Search
        Movie_search
    SearchOLD
    agenda
    exceptions.Exception
        AllocineError
    
    class AllocineError(exceptions.Exception)
     |  Allocine Exception object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, value)
     |  
     |  __str__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __getitem__(...)
    
    class Movie
     |  Movie object instance.
     |  
     |  Methods defined here:
     |  
     |  BAurl(self)
     |      Return the first mediaID video url found for the current movie
     |  
     |  XML(self)
     |      TO DO !!
     |      Will return a string in XML format with all infos of the Movie.
     |      Clients will use this XMLstream as they want (save file, parse it...)
     |  
     |  __init__(self, IDmovie)
     |      Create a new Movie object with given ID.
     |      HTML movie page is fetched directly when instantiated.
     |      Movie infos are parsed with included functions
     |  
     |  __repr__(self)
     |  
     |  date(self)
     |      Return the release date of the movie as string.
     |  
     |  director(self)
     |      Return the director of the movie as a tuple ( ID , Name )
     |  
     |  get_casting(self)
     |      Return the movie casting as a list of tuples :
     |      [ (Category, Job, PersonID, PersonName),(...) ...]
     |  
     |  get_mediaIDs(self)
     |      Return media IDs for videos as a list of tuples :
     |      [ ( MediaID , PictureURL, Title ) , ... ]
     |  
     |  get_photos(self)
     |      Return photos list related to the movie.
     |      Return a list of tuple : [ ( PictureURL , PictureTitle ) , ... ]
     |  
     |  has_casting(self)
     |      Return a boolean whether the movie has casting or not
     |  
     |  has_photos(self)
     |      Return a boolean whether the movie has photos or not
     |  
     |  has_videos(self)
     |      Return a boolean whether the movie has video or not
     |  
     |  infos(self)
     |      Return textual global informations about the movie as string.
     |  
     |  nationality(self)
     |      Return the nationality of the movie as string.
     |  
     |  parser(self)
     |      Parse all informations available for the movie.
     |      Does not return anything. The internal vars of the movie object are filled in
     |  
     |  pictureURL(self)
     |      Return the URL of the picture of the movie.
     |  
     |  synopsis(self)
     |      Return the synopsis of the movie
     |  
     |  title(self)
     |      Return the title of the movie.
    
    class Movie_search(Search)
     |  Methods defined here:
     |  
     |  __init__(self, kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Search:
     |  
     |  get_Themes(self)
     |      Return available search types of the website used.
     |      Return format is a dictionnary with themeID as key and themeName as value.
     |  
     |  has_next(self)
     |      Return wether or not, the search results contain a 'next page' link
     |      Return False if no other page or page number if next page
     |  
     |  next(self)
     |      Continue la recherche sur la page suivante
     |  
     |  previous(self)
     |      Recupère la page précédente de résultats
     |  
     |  start(self, nextpage=None)
     |      Start the search and return a list of tuples [ (id,text,title) , ... ]
     |      If <nextpage> is not given, first page of results is returned.
    
    class Movies
     |  Movie object handler
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  new(self, IDmovie)
     |      Return a Movie object with <IDmovie>.
     |      If Movie object with <IDmovie> already exists in the handler, return this object.
     |      Else, return a new Movie object
    
    class Personality
     |  Person Handler.
     |  
     |  Methods defined here:
     |  
     |  Biography(self, force=False)
     |      Return biography of the personnality.
     |      FR, EN and ES websites are supported only. DE website does not expose the biography.
     |      Set <force> to True to force parsing datas if needed.
     |      Return format is a list [ biography (string), movies (list), personnalities (list) ]
     |          movies contain [(movieID,movieTitle),...] as quoted in the biography
     |          personnalities contain [(persoID,persoName),...] as quoted in the biography
     |  
     |  Filmography(self, force=False)
     |      Return filmography of the personnality.
     |      NOT FULLY WORKING
     |  
     |  __init__(self, IDperso)
     |      Initialise vars and get source page for the requested <IDperso>.
     |  
     |  __repr__(self)
     |  
     |  birth(self)
     |      Return birth infos.
     |  
     |  get_mediaIDs(self, force=False)
     |      Return media IDs for videos as a list of tuples :
     |      [ ( MediaID , PictureURL, Title ) , ... ]
     |  
     |  get_photos(self, force=False)
     |      Return related photos for the personnality.
     |      return is a list of tuples : [ ( PicturePath , PictureTitle ) , ... ]
     |  
     |  has_photos(self)
     |      Return a boolean whether personnality has photos related or not
     |  
     |  has_videos(self)
     |      Return a boolean whether personnality has videos related or not
     |  
     |  jobs(self)
     |      Return cinema functions (jobs) of the personnality.
     |  
     |  name(self)
     |      Return personnality name.
     |  
     |  parser(self)
     |      Parse all informations available for the personnality.
     |      Does not return anything. The internal vars of the movie object are filled in.
     |  
     |  pictureURL(self)
     |      Return personnality portrait url
    
    class Search
     |  Class to search for allocine content
     |  
     |  Methods defined here:
     |  
     |  __init__(self, keyword='', searchtype='0')
     |      INITialise vars and check of searchtype is correct (i.e. the searchtype is supported by the website AND by the library).
     |      Client SHOULD check for available searchs before instantiate a search.
     |  
     |  get_Themes(self)
     |      Return available search types of the website used.
     |      Return format is a dictionnary with themeID as key and themeName as value.
     |  
     |  has_next(self)
     |      Return wether or not, the search results contain a 'next page' link
     |      Return False if no other page or page number if next page
     |  
     |  next(self)
     |      Continue la recherche sur la page suivante
     |  
     |  previous(self)
     |      Recupère la page précédente de résultats
     |  
     |  start(self, nextpage=None)
     |      Start the search and return a list of tuples [ (id,text,title) , ... ]
     |      If <nextpage> is not given, first page of results is returned.
    
    class SearchOLD
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  __repr__(self)
     |  
     |  get_Themes(self)
     |      Return a dictionnary with themesID as int and themes name as string
     |  
     |  get_type(self)
     |      Return the associated name of the type of search
     |  
     |  has_next(self)
     |      Return wether or not, the search results contain a 'next page' link
     |      Return False if no other page or page number if next page
     |  
     |  next_results(self)
     |      Récupère la prochaine page de résultats
     |  
     |  search(self, keyword='', Type='0', next=None)
     |      Search in <Type> for <keyword> results
     |      Return a list with (id,text,title)
     |          -id for the id of the searched item
     |          -text for something interesting (i.e: picture url)
     |          -title for the label to give to the found items
     |  
     |  supported(self)
     |      retourne un dictionnaire des recherches disponibles sur le site et supportées par la librairie
    
    class agenda
     |  Handler for agenda.
     |  
     |  Return movies for the week of the given date.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, periode=None)
     |      Init the agenda handler with the optional <periode> parameter.
     |      If ommited, <periode> is set to None, which cause the date to be 'this week'.
     |      <periode> parameter can be:
     |          - 'now' or None (default) for the actual week
     |          - 'next' for the next week
     |          - or a dd/mm/yyyy format date for the corresponding week
     |  
     |  __repr__(self)
     |  
     |  get_movies(self)
     |      Return a bloc of html datas corresponding to films.
     |      (This should not be called, and is internally used)
     |  
     |  get_movies_datas(self)
     |      Return informations about the films of the week.
     |      Result format is [ ( ID,Title,OriginalTitle,PictureURL,Genre,Lasts ) , ... ]
     |  
     |  next_week_date(self)
     |      Return a string representing the week period following the actual period.
     |      Return 'next' if needed, or a date in dd/mm/yyyy format
     |  
     |  previous_week_date(self)
     |      Return a string representing the week period preceding the actual period.
     |      Return now or next if needed, or a date in dd/mm/yyyy format

FUNCTIONS
    Log(msg, cat='I')
        Used to write log messages
    
    get_page(url, params={}, savehtml=True, filename='defaut.html', debuglevel=0)
        Download given url and return datas. Use GZIP compression if available
        <params> is a ditionnary for POST request
        when 'True', <savehtml> param indicate that <filename> should be used to write file on disk
        Set debuglevel to 1 to print http headers
    
    get_pic(url, filename='')
        Download the picture in the <url> into the optional <filename>
        If the <filename> is not given, it will be an arbitrary temporary filename
    
    get_video_url(mediaID, quality=None)
        Search and return a video link for the given <mediaID>.
        
        Will search in this order : HD, MD then LD (the best to the worst quality).
        Optional <quality> parameter enable to limit the search to this quality and beyond.
    
    infos_text(datas)
        Return given <datas> without html markup
        Allocine picture starring system is replaced with a textual equivalent
        <h*> and <br /> are replaced with newline escape char \n
        All other <...> markups are deleted and then datas are returned escaped (no '&...;' or such)
    
    set_country(country=None)
        Change the country website to use to get infos from
    
    unescape(text)
        credit : Fredrik Lundh
        found : http://effbot.org/zone/re-sub.htm#unescape-html

DATA
    AGENDA_URL = '/film/agenda.html'
    ALLOCINE_DOMAIN = 'http://www.allocine.fr'
    ALLOCINE_DOMAIN_dic = {'DE': 'http://www.allocine.de', 'EN': 'http://w...
    ALLOCINE_ENCODING = 'ISO-8859-1'
    ALLOCINE_ENCODING_dic = {'DE': 'ISO-8859-1', 'EN': 'ISO-8859-1', 'ES':...
    AVAILABLE_COUNTRIES = ['FR', 'EN', 'ES', 'DE']
    CACHEDIR = r'F:\Data\allocine\allocine'
    CASTING_URL = '/film/casting_gen_cfilm=%s.html'
    COOKIEFILE = r'F:\Data\allocine\allocine\cookies_allocine.lwp'
    COUNTRY = 'FR'
    MOVIE_URL = '/film/fichefilm_gen_cfilm=%s.html'
    PERSO_URL = '/personne/fichepersonne_gen_cpersonne=%s.html'
    PHOTOS_FILM_URL = '/film/galerievignette_gen_cfilm=%s.html'
    PHOTOS_MEDIA_URL = 'http://a69.g.akamai.net/n/69/10688/v1/img5.allocin...
    PHOTOS_PERSON_URL = '/personne/galerievignette_gen_cpersonne=%s.html'
    ROOTDIR = r'F:\Data\allocine\allocine'
    SEARCH_URL = '/recherche/'
    SORTIES_URL = '/film/agenda_gen_date=%s.html'
    THIS_WEEK_URL = '/film/cettesemaine.html'
    VIDEO_STREAM_URL = 'http://a69.g.akamai.net/n/69/32563/v1/mediaplayer....
    VIDEO_STREAM_URL_dic = {'DE': 'http://h.de.mediaplayer.allocine.fr%s.f...
    XML_BA_INFOS = '/video/xml/videos.asp?media=%s'
    __author__ = u'Alexsolex'
    __email__ = u'alexsolex(AT)gmail.com'
    __todo__ = u"\n-Harmoniser les retours infructueux de parse... page es...
    __version__ = u'0.0.1'
    cj = <_LWPCookieJar.LWPCookieJar[]>

VERSION
    0.0.1

AUTHOR
    Alexsolex